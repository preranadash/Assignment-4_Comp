#Problem 9
import numpy as np
import matplotlib.pyplot as plt

# Define the target density function
def target_density(x):
    if 3 < x < 7:
        return 1 / (7 - 3)
    else:
        return 0

# Metropolis algorithm
def metropolis_sampling(n_samples, initial_x):
    samples = []
    x_current = initial_x
    accepted_indices = []
    rejected_indices = []

    for i in range(n_samples):
        x_proposal = x_current + np.random.standard_normal()
        r = np.random.rand()
        
        acceptance_ratio = target_density(x_proposal) / target_density(x_current)
        
        if acceptance_ratio >= r:
            x_current = x_proposal
            accepted_indices.append(i)
        else:
            rejected_indices.append(i)
        
        samples.append(x_current)
    
    return np.array(samples), np.array(accepted_indices), np.array(rejected_indices)


# Parameters
n_samples = 1000
initial_x = 5.0  # Starting point within the interval

# Generate samples using the Metropolis algorithm
samples, accepted_indices, rejected_indices = metropolis_sampling(n_samples, initial_x)

# Plot the Markov Chain
plt.figure(figsize=(10, 6))
plt.plot(samples, label='Markov Chain')

# Plot accepted points
plt.scatter(accepted_indices, samples[accepted_indices], c='green', marker='o', label='Accepted Points')

# Plot rejected points
plt.scatter(rejected_indices, samples[rejected_indices], c='red', marker='x', label='Rejected Points')

plt.xlabel('Iteration')
plt.ylabel('Sample Value')
plt.title('Markov Chain generated by Metropolis Algorithm')
plt.legend()
plt.show()

# Plot density histogram of the samples
plt.figure(figsize=(10, 6))
plt.hist(samples, bins=50, density=True, alpha=0.6, color='blue', label='Sampled Distribution')

# Plot the theoretical uniform distribution
x = np.linspace(2, 8, 1000)
uniform_pdf = np.array([target_density(xi) for xi in x])

plt.plot(x, uniform_pdf, label='Uniform PDF (3 < x < 7)', color='red')
plt.xlabel('Value')
plt.ylabel('Density')
plt.legend()
plt.title('Density of Metropolis Samples and Uniform PDF')
plt.show()
